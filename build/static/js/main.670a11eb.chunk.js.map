{"version":3,"sources":["services/people.js","components/App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","InputField","text","val","handle","value","onChange","ListPersons","persons","deletePerson","map","person","deleteThisPerson","name","Person","number","onClick","Notification","message","messageType","className","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","newFilterValue","setNewFilterValue","notification","setNotification","setmessageType","filteredPersons","filter","includes","useEffect","peopleService","initialNotes","showNotification","type","setTimeout","event","target","onSubmit","preventDefault","personObject","replace","window","confirm","thisPerson","find","p","updatedPerson","updated","returnedPerson","concat","updatedPersons","catch","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.670a11eb.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'https://frozen-sands-39246.herokuapp.com/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n  }\n  \n  const create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n  }\n  \n  const update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n  }\n  \n  const remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n  }\n\n  export default { \n    getAll: getAll, \n    create: create, \n    update: update,\n    remove: remove\n  }","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport peopleService from '../services/people'\nimport people from '../services/people'\nimport '../index.css'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newFilterValue, setNewFilterValue] = useState('')\n  const [notification, setNotification] = useState(null)\n  const [messageType, setmessageType] = useState(\"notification\")\n  const filteredPersons = persons.filter(person => person.name.includes(newFilterValue))\n\n  useEffect(() => {\n    const eventHandler = initialNotes => {\n      setPersons(initialNotes)\n    }\n  \n    peopleService.getAll().then(eventHandler)\n  }, [])\n\n  const addPerson = (event) => {\n      event.preventDefault()\n      \n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n\n      if (persons.map(person => person.name).includes(newName)) {\n          const replace = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`);\n          const thisPerson = persons.find(p => p.name == newName)\n          const updatedPerson = {...thisPerson, number: newNumber}\n\n          if (replace) {\n            peopleService\n              .update(updatedPerson.id, updatedPerson)\n              .then(data => {\n                peopleService.getAll().then((updated) => setPersons(updated))\n                showNotification(`Updated the number of ${updatedPerson.name}`,\"notification\")\n              })\n              showNotification(`Information of ${updatedPerson.name} has already been removed from server`,\"error\")\n      \n          }\n      } else {\n        peopleService\n          .create(personObject)\n          .then(returnedPerson => {\n            setPersons(persons.concat(returnedPerson))\n          })\n\n        showNotification(`Added ${personObject.name}`,\"notification\")\n      }\n\n      setNewName('')\n      setNewNumber('')\n      \n  }\n\n  const showNotification = (message, type) => {\n    setmessageType(type)\n    setNotification(message)\n    setTimeout(() => {\n      setNotification(null)\n    }, 5000)\n  }\n\n  const deletePerson = (person) => {\n    const confirmed = window.confirm(`Delete ${person.name}`)\n\n    if (confirmed) {\n      peopleService\n      .remove(person.id)\n      .then(data => {\n        peopleService.getAll().then((updatedPersons) => setPersons(updatedPersons))\n        showNotification(`${person.name} removed succesfully`,\"notification\")\n      })\n      .catch(error => {\n        showNotification(`Information of ${person.name} has already been removed from server`,\"error\")\n      })\n      \n    }\n    \n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n      setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n      setNewFilterValue(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notification} messageType={messageType} />\n      <InputField text={'filter shown with '} val={newFilterValue} handle={handleFilterChange} />\n      \n      <h2>add a new</h2>\n      <form onSubmit={addPerson}>\n        <InputField text={'name: '} val={newName} handle={handleNameChange} />\n        <InputField text={'number: '} val={newNumber} handle={handleNumberChange} />\n        <div><button type=\"submit\">add</button></div>\n      </form>\n      \n      <h2>Numbers</h2>\n      <ListPersons persons={filteredPersons} deletePerson={deletePerson} />\n    </div>\n  )\n\n}\n\nconst InputField = ({text, val, handle}) => {\n    return (\n        <div>\n            {text} <input \n                value={val}  \n                onChange={handle}          \n            />\n        </div>\n    )\n}\n\nconst ListPersons = ({persons, deletePerson}) => {\n    return ( \n        <div>\n            {persons.map(person => \n              <Person \n                key={person.name}\n                person={person} \n                deleteThisPerson={() => deletePerson(person)}\n            />)}\n        </div>\n    )\n}\n\nconst Person = ({person, deleteThisPerson}) => {\n    return(\n        <div>\n          {person.name + \" \"} \n          {person.number}\n          <button onClick={deleteThisPerson}>delete</button>\n        </div>\n    )\n}\n\nconst Notification = ({ message, messageType }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={messageType}>\n      {message}\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}